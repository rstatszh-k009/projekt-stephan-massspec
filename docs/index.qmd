---
title: "index"
format: html
editor: visual
author: "Stephan Walker"
editor_options: 
  chunk_output_type: console
lang: de
---

# Einleitung

Im Rahmen des Nationalen Fremdstoffuntersuchungs Programm (NFUP) wurden in Proben von tierischen Lebensmitteln die Rückstände von Cortison und Hydrocortison gemessen. Die Messung der Substanzen erfolgte mittels Flüssigchromatograghie (LC) gekoppelt mit hochauflösender Massenspektrometrie (HRMS). Dabei werden zwischen 45 und 200 Tierarzneimittel quantifiziert.

Cortison und Hydrocortison kommen natürlich in Produkten tierischer Herkunft vor. Für die Substanzen gibt es ausser für Milch keine Grenzwerte oder sonstige Beurteilungskriterien.

Mit der folgenden Datenanalyse soll gezeit werden ob sich von den gemessenen Konzentrationen ein Beurteilungskriterium ableiten lässt oder ob die Substanzen als Positivkontrolle für die Methode verwendet werden können.

Die Daten wurden zwischen 2019 bis 2024 erhoben.

```{r}
library(tidyverse)
library(gt)
```

```{r}
# read_csv2 für ";" geteilte Tabelle
cortison_import <- read_csv2(here::here("daten/raw/Cortison_csv.csv"))
hydrocortison_import <- read_csv2(here::here("daten/raw/Hydrocortison_csv.csv"))
```

# Daten

Resultate der im Rahmen des NFUP durchgeführten Messungen durch die Abteilung Tierarzneimittel Analytik des Kantonalen Labors Zürich.

## Analyseziele

Es soll gezeigt werden wie sich die Konzentrationen von Cortison und Hydrocortison in den mehr als 2000 Messungen verteilen.

Gibt es Unterschiede zwischen einzelnen Matrizes? z.B Muskel und Leber

Gibt es Unterschiede zwischen verschiedenen Tierarten? z.B. Rinder und Schweine

# Datenaufbereitung

Daten zusammenführen und Spaltentitel ändern

```{r}
# merge mit all = TRUE um auch Proben mit nur einem Resultat in der Tabelle zu behalten
data_merge <- merge(cortison_import, hydrocortison_import, by="ProbenID", all = TRUE)

# Konzentrationen als Zahl(numeric)
data_numeric <- mutate(data_merge,
                           cortison_conc = as.numeric(ResultatResultat.x)) |> 
                  mutate(data_merge,
                           hydrocortison_conc = as.numeric(ResultatResultat.y))

# ware und datum in einer Spalte auch wenn nur ein Wert gefunden                 

data_ware2 <- data_numeric |> 
  mutate(ware = ProbeWare.y)
  
data_ware3 <- data_ware2 |> 
  mutate(ware = case_when(
    ware = is.na(ware) ~ ProbeWare.x,
    .default = ProbeWare.y
  ))
  
data_ware3 |> 
  count(ware)

# ware aufräumen
data_ware_clean <- data_ware3 |> 
  mutate(ware = case_when(
    ware == "Schwein - D\xe4rme" ~ "Schwein - Darm",
    ware == "Kuh - But" ~ "Kuh - Blut",
    ware == "Blut - Kuh" ~ "Kuh - Blut",
    ware == "Blut - Kalb" ~ "Kuh - Blut",
    ware == "Kalb- Blut" ~ "Kalb - Blut",
    ware == "Fisch -Muskel" ~ "Fisch - Muskel",
    ware == "Damhirsch - Muskel" ~ "Zuchtwild - Muskel",
    ware == "Gehege- oder Zuchtschalenwild - Leber" ~ "Zuchtwild - Leber",
    ware == "Kalb -  Blut" ~ "Kalb - Blut", # zwei leerschläge!
    ware == "Kalb-Blut" ~ "Kalb - Blut",
    ware == "Kalb- Muskel" ~ "Kalb - Muskel",
    ware == "Kalbsfleisch" ~ "Kalb - Muskel",
    ware == "Kalb - Urin" ~ "Kalb - Harn",
    ware == "Kuh - Urin" ~ "Kuh - Harn",
    ware == "Kalb- Leber" ~ "Kalb - Leber",
    ware == "Kuh -Blut" ~ "Kuh - Blut",
    ware == "Kuh- Blut" ~ "Kuh - Blut",
    ware == "Kuh-Blut" ~ "Kuh - Blut",
    ware == "Kuh- Leber" ~ "Kuh - Leber",
    ware == "Kuh- Muskel" ~ "Kuh - Muskel",
    ware == "Milchkuh - Blut" ~ "Kuh - Blut",
    ware == "Rind - Kalb - Kuh - Muskel" ~ "Rind - Muskel",
    ware == "Rind / Kalb / Kuh - Blut" ~ "Rind - Blut",
    ware == "Rind / Kalb / Kuh - Harn" ~ "Rind - Harn",
    ware == "Rind / Kalb / Kuh - Leber" ~ "Rind - Leber",
    ware == "Rind / Kalb / Kuh - Urin" ~ "Rind - Harn",
    ware == "Rind Kalb Kuh  - Leber" ~ "Rind - Leber",
    ware == "Rind Kalb Kuh - Leber" ~ "Rind - Leber",
    ware == "Rind - Urin" ~ "Rind - Harn",
    ware == "Rind- Blut" ~ "Rind - Blut",
    ware == "Rind -Blut" ~ "Rind - Blut",
    ware == "Rind- Leber" ~ "Rind - Leber",
    ware == "Rind- Muskel" ~ "Rind - Muskel",
    ware == "Rind-Blut" ~ "Rind - Blut",
    ware == "Rind/Kalb/Kuh - Blut" ~ "Rind - Blut",
    ware == "Rind / Kalb / Kuh - Harn" ~ "Rind - Harn",
    ware == "Rind / Kalb / Kuh - Leber" ~ "Rind - Leber",
    ware == "Rind / Kalb / Kuh - Urin" ~ "Rind - Harn",
    ware == "Rind/Kalb/Kuh - Harn" ~ "Rind - Harn",
    ware == "Rind/Kalb/Kuh - Leber" ~ "Rind - Leber",
    ware == "Rind/Kalb/Kuh - Muskel" ~ "Rind - Muskel",
    ware == "Rind/Kalb/Kuh - Niere" ~ "Rind - Niere",
    ware == "Rind/Kalb/Kuh - Plasma" ~ "Rind - Plasma",
    ware == "Rind/Kalb/Kuh- Blut" ~ "Rind - Blut",
    ware == "Schafe - Leber" ~ "Schaf - Leber",
    ware == "Schafe - Muskel" ~ "Schaf - Muskel",
    ware == "Schafe - Niere" ~ "Schaf - Niere",
    ware == "Schweine - Muskel" ~ "Schwein - Muskel",
    ware == "Stier - Blut" ~ "Rind - Blut",
    ware == "Stier - Harn" ~ "Rind - Harn",
    ware == "Ziegen - Leber" ~ "Ziege - Leber",
    ware == "Ziegen - Muskel" ~ "Ziege - Muskel",
    ware == "Muni - Harn" ~ "Rind - Harn",
    ware == "Muni - Leber" ~ "Rind - Leber",
    ware == "Muni - Muskel" ~ "Rind - Muskel",
    ware == "Ochs - Harn" ~ "Rind - Harn",
    ware == "Ochs - Muskel" ~ "Rind - Muskel",
    ware == "Ochse - Harn" ~ "Rind - Harn",
    ware == "Ochse - Leber" ~ "Rind - Leber",
    .default = ware
  ))
  
data_ware3 |> 
  count(ware)

data_ware_clean |> 
  count(ware)

# ware trennen in tierart und matrix
data_matrix_tierart <- data_ware_clean |> 
  separate(ware, c("tierart","matrix"))

data_matrix_tierart |> 
  count(matrix)

data_matrix_tierart |> 
  count(tierart)
                
# datum zusammenfassen

data_matrix_tierart_datum <- data_matrix_tierart |> 
  mutate(datum = ProbeErhebungsdatum.y)

data_matrix_tierart_datum |> 
  count(datum)

data_matrix_tierart_datum2 <- data_matrix_tierart_datum |> 
  mutate(datum = case_when(
    datum = is.na(datum) ~ ProbeErhebungsdatum.x,
    .default = ProbeErhebungsdatum.y
  ))

data_matrix_tierart_datum2 |> 
  count(datum)

# datum aufräumen

data_matrix_tierart_datum_clean <- data_matrix_tierart_datum2 |> 
  mutate(datum = case_when(
    datum == "25.10.0202 00:00:00" ~ "25.10.2021",
    .default = datum
  ))

data_matrix_tierart_datum_clean |> 
  count(datum)

# Datum formatieren
data_matrix_tierart_date <- data_matrix_tierart_datum_clean |> 
  mutate(datum = as_date(datum, format = "%d.%m.%Y"))


data_matrix_tierart_date |> 
  count(datum)

data_matrix_tierart_date |> 
  glimpse()

# Methode in einer Spalte

data_matrix_tierart_date_meth <- data_matrix_tierart_date |> 
  mutate(methode =  ResultatMethodencode.y)

data_matrix_tierart_date_meth2 <- data_matrix_tierart_date_meth |> 
  mutate(methode = case_when(
    methode = is.na(methode) ~ ResultatMethodencode.x,
    .default = ResultatMethodencode.y
  ))

data_matrix_tierart_date_meth2 |> 
  count(methode)

data_matrix_tierart_date_methnr <- data_matrix_tierart_date_meth2 |> 
  mutate(methode = case_when(
    methode == "Z4044" ~ "EtAc",
    methode == "Z4050" ~ "ACN",
    .default = methode
  ))

data_matrix_tierart_date_methnr |> 
  count(methode)

data_matrix_tierart_date_methnr |> 
  glimpse()
```

summarize

```{r}
cortison_tidy <- data_matrix_tierart_date_methnr |> 
  group_by(ProbenID,cortison_conc,hydrocortison_conc,tierart,matrix,datum,methode) |> 
  summarise()
```

exportieren

```{r}

# write_csv(x = cortison_tidy,
#          "daten/processed/cortison_tidy.csv")
```

Datum formatieren

Import tidy data

```{r}
#input_data <- read_csv(here::here("daten/processed/cortison_tidy.csv"))
input_data <- cortison_tidy

glimpse(input_data)
```

### Bestimmungsgrenze

Werte unterhalbder Bestimmungsgrenze können zwischen 0 und der Bestimmungsgrenze liegen. Für Methode ACN 1 µg/kg, für Methode EtAc 0.25 µg/kg

```{r}
# Faktor
jahreszeiten <- c("Frühling","Sommer","Herbst","Winter")
```

```{r}
ohne_NA <- input_data |> 
  mutate(cortison_low = case_when(
    cortison_conc = is.na(cortison_conc) ~ 0,
    .default = cortison_conc
  )) |> 
  mutate(bg = case_when(
    methode == "EtAc" ~ 0.25,
    methode == "ACN"~ 1
  )) |> 
  mutate(cortison_bg = case_when(
    cortison_low == "0" ~ bg,
    .default = cortison_low
  )) |> 
  mutate(hydrocortison_low = case_when(
    hydrocortison_conc = is.na(hydrocortison_conc) ~ 0,
    .default = hydrocortison_conc
  )) |> 
  mutate(hydrocortison_bg = case_when(
    hydrocortison_low == "0" ~ bg,
    .default = hydrocortison_low
  )) |> 
  mutate(monat = month(datum)) |> 
  mutate(jahreszeit = case_when(
    monat == 3 ~ "Frühling",
    monat == 4 ~ "Frühling",
    monat == 5 ~ "Frühling",
    monat == 6 ~ "Sommer",
    monat == 7 ~ "Sommer",
    monat == 8 ~ "Sommer",
    monat == 9 ~ "Herbst",
    monat == 10 ~ "Herbst",
    monat == 11 ~ "Herbst",
    monat == 12 ~ "Winter",
    monat == 1 ~ "Winter",
    monat == 2 ~ "Winter"
  ))|> # negativ = 1, positiv = 0
  mutate(jahreszeit_fct = factor(jahreszeit, levels = jahreszeiten)) |> 
  mutate(cortison_pos = case_when(
    cortison_low == 0 ~ 1,
    .default = 0
  )) |> # negativ = 1, positiv = 0
  mutate(hydrocortison_pos = case_when(
    hydrocortison_low == 0 ~ 1,
    .default = 0))
    
  
glimpse(ohne_NA)
ohne_NA |> 
  count(bg)

ohne_NA |> 
  count(matrix)

ohne_NA |> 
  count(jahreszeit)
```

Untergruppen erstellen

```{r}
leber <- filter(ohne_NA, matrix == "Leber")

niere <- filter(ohne_NA, matrix == "Niere")

muskel <- filter(ohne_NA, matrix == "Muskel")

harn <- filter(ohne_NA, matrix == "Harn")

schwein <- filter(ohne_NA, tierart == "Schwein")

rinder <- filter(ohne_NA, tierart == "Rind" | tierart == "Kuh" | tierart == "Kalb")

rinder |> 
  count(tierart)
```

```{r}
# boxplot hydrocortison
ggplot(muskel, mapping = aes(
  x = jahreszeit_fct,
  y = hydrocortison_low
)) +
  geom_boxplot(outlier.shape = NA) +
  theme_minimal()+
  ylim(c(0,40))

# boxplot hydrocortison
ggplot(harn, mapping = aes(
  x = jahreszeit_fct,
  y = hydrocortison_low
)) +
  geom_boxplot(outlier.shape = NA) +
  theme_minimal()+
  ylim(c(0,400))
```

```{r}
# boxplot cortison
ggplot(muskel, mapping = aes(
  x = jahreszeit_fct,
  y = cortison_low
)) +
  geom_boxplot(outlier.shape = NA) +
  theme_minimal()+
  ylim(c(0,15))


# boxplot cortison
ggplot(harn, mapping = aes(
  x = jahreszeit_fct,
  y = cortison_low
)) +
  geom_boxplot(outlier.shape = NA) +
  theme_minimal()+
  ylim(c(0,150))
```

```{r}
# Tabelle jahreszeit
muskel |> 
  group_by(jahreszeit_fct) |> 
  summarise(mean(cortison_low), mean(hydrocortison_low))

harn |> 
  group_by(jahreszeit_fct) |> 
  summarise(mean(cortison_low), mean(hydrocortison_low))
```

```{r}
# Tabelle mit positiven
# übersicht Cortison
ohne_NA |> 
  group_by(matrix) |> 
  summarise("Anzahl Proben" = n(),"Prozent negativ" = round((sum(cortison_pos/n()))*100,0),"Median [µg/kg]" = round(mean(cortison_low),0), "kleinster Wert [µg/kg]" = min(cortison_low),"höchster Wert [µg/kg]" = max(cortison_low)) |> 
  gt()
# übersicht Hydrocortison  
ohne_NA |> 
  group_by(matrix) |> 
  summarise("Anzahl Proben" = n(),"Prozent negativ" = round((sum(hydrocortison_pos/n()))*100,0),"Median [µg/kg]" = round(mean(hydrocortison_low),0), "kleinster Wert [µg/kg]" = min(hydrocortison_low),"höchster Wert [µg/kg]" = max(hydrocortison_low)) |> 
  gt()

# Muskel nach Tierart
muskel |> 
   group_by(tierart) |> 
  summarise("Anzahl Proben" = n(),"Prozent negativ" = round((sum(hydrocortison_pos/n()))*100,0),"Median [µg/kg]" = round(mean(hydrocortison_low),0), "kleinster Wert [µg/kg]" = min(hydrocortison_low),"höchster Wert [µg/kg]" = max(hydrocortison_low)) |> 
  gt()

```

Daten überprüfen

```{r}

```

# Daten Visualisierung

```{r}
# Verteilung in Muskel
ggplot(muskel, mapping = aes(x = tierart,
                             y = hydrocortison_low))+
   geom_boxplot(outlier.shape = NA) +
  theme_minimal()+
  ylim(c(0,40))

```

Nach Tierart

```{r}

```

Tabelle Muskel

```{r}
group_by(muskel, tierart) |> 
  summarise(n(),
            mean(cortison_low), 
            min(cortison_low), 
            max(cortison_low), 
            mean(hydrocortison_low),
            min(hydrocortison_low),
            max(hydrocortison_low)) |> 
  gt()

```

# Ergebnisse

# Schlussfolgerung
